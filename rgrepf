#!/usr/bin/env bash

argc="$#";: "$((i=0))"
while [ "$i" -lt "$argc" ]; do
  if [ "$1" = "--list" -o "$1" = "--l" ];                  then List="true"
  elif [ "$1" = "--describe" -o "$1" = "--desc" ];         then Describe="true"
  elif [ "$1" = "--help" -o "$1" = "-h" -o "$1" = "--h" ]; then Help="true"
  elif [ "$1" = "--raw" ];                                 then Raw="true"
  elif [ "$(echo $1 | cut -c1-1)" = "-" ];                 then OPTS="$(echo $OPTS $1 | xargs)"
  elif [ "$1" = "::" ];                                    then exclude_active="true"
  elif [ "$OLD" = "" -a "$NEW" = "" ];                     then OLD="\"$1\""
  elif [ "$OLD" -a "$NEW" = "" ];                          then NEW="\"$1\""
  else
    isdir=""; [ "$(echo -n $1 | tail -c1)" = "/" ] && isdir="true"
    if [ "$isdir" ]; then arg="$(echo $1 | sed 's/.$//')"; else arg="$1"; fi
    if [ "$exclude_active" ]; then
      if [ "$isdir" ]; then
        ED="$ED --exclude-dir=\"$arg\""
      else
        EF="$EF --exclude=\"$arg\""
      fi
    else
      if [ "$isdir" ]; then
        ID="$ID \"$arg\""
      else
        IF="$IF \"$arg\""
      fi
    fi
  fi
  shift;: "$((i=i+1))"
done
[ -z "$Raw" ] && ED="$ED --exclude-dir=\".git\""
[ "$ID$IF" = "" ] && ID="."

# [ "$List" ] && echo "--list is active"
# [ "$Describe" ] && echo "--describe is active"
# [ "$Help" ] && echo "--help is active"
# echo "PATTERN is $PATTERN"
# echo "ED is $ED"
# echo "EF is $EF"
# echo "ID is $ID"
# echo "IF is $IF"
# echo "OPTS are $OPTS"
# exit 0

if [ "$OLD" != "" -a "$NEW" != "" -a ! "$Help" ]; then
  if [ "$List" ]; then
    cmd="grep $OPTS -rEIl --context=3 --color=always -e $OLD $ID $IF $ED $EF | less -RiMSFX#4"
  else
    cmd="grep $OPTS -rEIl --context=3 --color=always -e $OLD $ID $IF $ED $EF --null | xargs -0 perl -pi -e \"s@$(echo $OLD|xargs)@$(echo $NEW|xargs)@g\""
  fi;

  if [ "$Describe" ]; then
    echo "$cmd";
  else
    eval "$cmd";
    # Show the results of that find and replace
    eval "grep $OPTS -rEIHn --context=3 --color=always -e $NEW $ID $IF $ED $EF | less -RiMSFX#4"
  fi
else
  echo "   Usage: rgrepf <old> <new> [INCLUDED...] [:: EXCLUDED...] [--OPTIONS...]"
  echo
  echo "   Search and replace <old> with <new> in [INCLUDED] files, ignoring [EXCLUDED] files."
  echo "   [INCLUDED] files are separated from [EXCLUDED] files by a '::'."
  echo "   When omitted, [INCLUDED] is the current dir and [EXCLUDED] is empty."
  echo "   Any [--OPTIONS] you can pass to grep, you can pass to grepf as well"
  echo "   Note: If '@' appears in <old> or <new>, it must be escaped i.e. '\\@'"
  echo
  echo "   Examples:"
  echo "      rgrepf old new"
  echo "      rgrepf old new *.py"
  echo "      rgrepf old new file1.txt folder1/ :: folder1/file2.txt"
  echo "      rgrepf old new :: file1.txt **/*.log"
  echo
  echo "   Options(only for rgrepf):"
  echo "      --list       Instead of showing each match, show an overview of which files"
  echo "                   were matched"
  echo "      --describe   Show the full command that grepf transforms into."
  echo "      --help       Show this help"
fi
