#!/usr/bin/env bash

## Get grepprg (bsdgrep/gnugrep/ag/rg) ##
if command -v rrg >/dev/null 2>&1; then
  grepprg='rg'
elif command -v ag >/dev/null 2>&1; then
  grepprg='ag'
elif grep --version | grep -i bsd >/dev/null 2>&1; then
  grepprg='BSD grep'
elif grep --version | grep -i gnu >/dev/null 2>&1; then
  grepprg='GNU grep'
else
  echo 'Your version of grep is unknown (???)'
  exit 1
fi

## Unpack script arguments ##
argc="$#";: "$((i=0))"
while [ "$i" -lt "$argc" ]; do
  sq=''; [ "$(echo "$1" | grep "'")" ] && sq='true'
  if [ "$1" = '--help' ] || [ "$1" = '-h' ] || [ "$1" = '--h' ]; then Help='true'
  elif [ "$1" = '--list' ] || [ "$1" = '--l' ];                  then List='true'
  elif [ "$1" = '--describe' ] || [ "$1" = '--desc' ];           then Describe='true'
  elif [ "$1" = '--raw' ];                                       then Raw='true'
  elif [ "$(echo "$1" | cut -c1-1)" = '-' ];                     then OPTS="$OPTS $1"
  elif [ "$1" = '::' ];                                          then exclude_active='true'
  elif [ "$OLD" = '' ] && [ "$NEW" = '' ]; then
    if [ "$sq" ];
    then OLD="\"$1\"";
    else OLD="'$1'"; fi
  elif [ "$OLD" ] && [ "$NEW" = '' ]; then
    if [ "$sq" ];
    then NEW="\"$1\"";
    else NEW="'$1'"; fi
  else
    isdir=''; [ "$(echo -n "$1" | tail -c1)" = '/' ] && isdir='true'
    if [ "$isdir" ];
    then arg="$(echo "$1" | sed 's/.$//')"; # remove trailing slash for directories
    else arg="$1"; fi
    if [ "$exclude_active" ]; then
      basearg="$(echo "$arg" | sed -n 's!.*/\(.*\)$!\1!p')" # check if $arg is a filepath (slashes present) or filename (no slashes)
      if [ "$basearg" ] && [ "$grepprg" = 'GNU grep' ]; then
        if [ "$isdir" ];
        then echo "   WARNING: GNU grep --exclude-dir doesn't support '$arg/', use '$basearg/' instead";
        else echo "   WARNING: GNU grep --exclude doesn't support '$arg', use '$basearg' instead"; fi
        warning='true'
      fi
      if [ "$grepprg" = "rg" ]; then
        ED=""; EF="";
      elif [ "$grepprg" = "ag" ]; then
        if [ "$isdir" ];
        then ED="$ED $arg/";
        else EF="$EF $arg"; fi
      else
        if [ "$isdir" ];
        then ED="$ED --exclude-dir='$arg'"; # ED (Excluded Directories)
        else EF="$EF --exclude='$arg'"; fi # EF (Excluded Files)
      fi
    else
      if [ "$isdir" ];
      then ID="$ID '$arg'"; # ID (Included Directories)
      else IF="$IF '$arg'"; fi # IF (Included Files)
    fi
  fi
  shift;: "$((i=i+1))"
done
[ -z "$Raw" ] && [ "$grepprg" != 'rg' ] && [ "$grepprg" != 'ag' ] && ED="$ED --exclude-dir='.git'"
[ "$ID$IF" = '' ] && ID='.'

## Debugging ##
# [ "$Help" ] && echo "--help is active"
# [ "$List" ] && echo "--list is active"
# [ "$Describe" ] && echo "--describe is active"
# [ "$Raw" ] && echo "--raw is active"
# echo "grepprg is $grepprg"
# echo "OLD is $OLD"
# echo "NEW is $NEW"
# echo "ED is $ED"
# echo "EF is $EF"
# echo "ID is $ID"
# echo "IF is $IF"
# echo "OPTS are $OPTS"
# exit 0

# Sanitize $OLDRE and $NEWRE
OLDRE="$(echo "$OLD" | xargs | sed 's#\!#\\!#g')"
NEWRE="$(echo "$NEW" | xargs | sed 's#\!#\\!#g')"

## Execute Command ##
if [ "$OLD" ] && [ "$NEW" ] && [ -z "$Help" ]; then
  if [ "$List" ]; then
    if [ "$grepprg" = 'rg' ]; then
      cmd="echo 'not implemented yet'";
    elif [ "$grepprg" = 'ag' ]; then
      # cmd="ag $OPTS -l --pager='less -RIMSFX#4' $OLD $ID $IF -p <(printf \"$ED $EF\" | tr -s ' ' '\n')";
      if [ "$ED$EF" = '' ];
      then cmd="ag $OPTS -l --nocolor --pager='less -RIMSFX#4' $OLD $ID $IF";
      else cmd="ag $OPTS -l --nocolor --pager='less -RIMSFX#4' $OLD $ID $IF -p <(printf '$ED $EF' | tr -s ' ' '\n')"; fi
    else
      cmd="grep $OPTS -rEIl --color=always -e $OLD $ID $IF $ED $EF | less -RiMSFX#4";
    fi
  else
    sq=''; [ "$(echo "$OLDRE$NEWRE" | grep "'")" ] && sq='true'
    if [ "$grepprg" = 'rg' ]; then
      cmd="echo 'not implemented yet'";
    elif [ "$grepprg" = 'ag' ]; then
      if [ "$ED$EF" = '' ];
      then cmd="ag $OPTS -l --nocolor --pager='less -RIMSFX#4' $OLD $ID $IF";
      else cmd="ag $OPTS -l --nocolor --pager='less -RIMSFX#4' $OLD $ID $IF -p <(printf '$ED $EF' | tr -s ' ' '\n')"; fi
      if [ "$sq" ];
      then cmd="$cmd --null | xargs -0 perl -pi -e \"s@$OLDRE@$NEWRE@g\"";
      else cmd="$cmd --null | xargs -0 perl -pi -e 's!$OLDRE!$NEWRE!g'"; fi
    else
      if [ "$sq" ];
      then cmd="grep $OPTS -rEIl -e $OLD $ID $IF $ED $EF --null | xargs -0 perl -pi -e \"s@$OLDRE@$NEWRE@g\"";
      else cmd="grep $OPTS -rEIl -e $OLD $ID $IF $ED $EF --null | xargs -0 perl -pi -e 's!$OLDRE!$NEWRE!g'"; fi
    fi
  fi;
  [ "$warning" ] && [ -z "$Describe" ] && read -p "Press Enter to continue"
  if [ "$Describe" ]; then
    echo "$cmd"
  else
    eval "$cmd"
    if [ "$grepprg" = 'rg' ]; then
      eval "echo 'not implemented yet'";
    elif [ "$grepprg" = 'ag' ]; then
      eval "ag $OPTS -C3 --pager='less -RIMSFX#4' $NEW $ID $IF -p <(printf \"$ED $EF\" | tr -s ' ' '\n')";
    else
      eval "grep $OPTS -rEIHnC3 --color=always -e $NEW $ID $IF $ED $EF | less -RiMSFX#4"
    fi
  fi
else
  echo "   Usage: rgrepf <old> <new> [INCLUDED...] [:: EXCLUDED...] [--OPTIONS...]"
  echo
  echo "   Search and replace <old> with <new> in [INCLUDED] files, ignoring [EXCLUDED] files."
  echo "   [INCLUDED] files are separated from [EXCLUDED] files by a '::'."
  echo "   By default, [INCLUDED] is the current directory."
  echo
  echo "   Examples:"
  echo "      rgrepf old new"
  echo "      rgrepf old new *.py"
  echo "      rgrepf old new file1.txt folder1/ :: folder1/file2.txt"
  echo "      rgrepf old new :: file1.txt **/*.log"
  echo
  echo "   Options(only for rgrepf):"
  echo "      --help       Show this help"
  echo "      --list       List the files that are affected"
  echo "      --describe   Show the full command that grepf transforms into"
  echo "      --raw        Raw unfiltered searches i.e. .git/ is filtered by default, this"
  echo "                   turns it off"
  echo
  echo "   Note:"
  echo "      Any [--OPTIONS] you can pass to $grepprg, you can pass to grepf as well."
  echo "      If in doubt, wrap it in single quotes 'like this'"
fi
